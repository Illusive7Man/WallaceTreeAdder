import argparse
import math
from numpy import binary_repr
import random

verilog_code = []

def calculate_max_length(M, N):     # page 5
    bit_number_floor = math.floor(math.log(M, 2))
    max_range = 2 ** bit_number_floor
    bit_number_floor_temp = bit_number_floor

    while bit_number_floor_temp - N >= 0:
        max_range += 2 ** (bit_number_floor_temp - N)
        bit_number_floor_temp -= N

    if M <= max_range:
        return N + bit_number_floor
    else:
        return N + bit_number_floor + 1


def prediction_generation(M, N):

    max_length = calculate_max_length(M, N)  # number of bits result will have


    verilog_code.append(
        f"""
module stimulus;

    wire [{max_length - 1 : 0}] RESULT;
    reg [{M * N - 1}:0] OPERANDS;

     wallace_tree wallace_tree(.result(RESULT), .initial_operands(OPERANDS));

    initial begin
        #1 $monitor("result is %d", $signed(RESULT));\
    """)

    GHT_record = []
    # operands_decimal_matrix = [[-4, 12, 124, 49, -62, -58, 98, -34, 121, 17, -5, 7, 68, -119, 94, 84, -22, 28, -122, 4, -115, -79, -116, 41, -114, 9, 90, -44, -50, -53, -92, 27, 60, 24, -61, -74, -42, 109, 7, 119, 109, 23, 58, -39, -72, 68, 44, -35, 10, -96, -45, -71, -110, 74, 78, -93, 117, 80, 123, -20, 56, 68, 9, 61], [-108, 105, 22, -65, 103, -39, -109, 8, 22, 117, -86, -124, 106, 22, 52, 21, 37, -84, 122, 3, 72, 52, 56, 25, 125, -105, 111, -104, 110, 108, -74, 0, 86, 120, -23, -61, 42, -121, 109, -78, 25, -84, 62, 116, -69, 48, 1, -48, -38, 82, -7, -52, 115, 114, 49, -100, -83, 51, 85, 104, -7, 112, 59, -2], [38, 74, -20, 10, 52, 39, 99, -82, 87, -84, 121, -55, -86, 80, -61, -63, 11, 114, -46, 121, 39, 119, 4, 95, 61, 7, 45, -100, -80, -72, 19, -10, 48, -13, 42, 82, 80, -75, 93, 98, 47, 62, -78, -102, 100, -113, -19, -16, -77, 108, -34, -122, -20, 11, -107, 68, -26, 35, 32, -118, -87, -93, -38, 68], [-1, 82, 61, 48, -15, -61, 9, -93, 61, 42, 77, -79, -19, -40, 9, -76, -10, -57, 49, 117, 112, -106, -22, 30, 104, 72, 83, -69, 82, -45, -100, -47, -20, 8, -70, -127, 52, -72, 109, -43, 120, -104, 66, -13, -122, 53, 10, 81, 94, -65, 49, -23, -62, -103, -82, -10, -92, -48, 107, 18, -42, -116, -14, 83], [29, 9, -62, -118, 17, -7, -49, -17, 64, -87, -104, 0, -27, -76, 68, 72, 111, 60, -14, -5, 113, -20, 90, -67, 38, 109, 121, 65, -108, -123, 32, -48, -106, -96, -57, 29, -120, -47, -104, 29, -110, 82, -37, 73, 108, 66, 13, -29, 66, -71, -38, 27, -60, 26, -120, 94, 34, 18, -10, 89, -25, 110, 7, 42], [-55, 76, -16, 95, 59, 53, 61, 23, 3, -28, 106, 121, -117, 89, -112, -40, -123, -73, 42, 92, -61, -103, -16, 44, 124, 116, 103, 89, 21, -59, -35, -105, 115, 93, -78, 105, -83, -127, -113, 115, -30, -13, -37, 28, 110, 120, 77, 54, 94, 116, 83, -19, -29, 33, 80, -118, 8, 6, 23, 122, 9, -80, -61, 22], [23, 21, 37, 104, 47, 121, -5, -35, -51, 22, -32, -23, 111, 36, 10, 101, -127, 33, 14, -106, 6, 88, -90, -32, -52, 104, 81, -110, -43, -93, 49, 91, 47, -56, 35, -27, -22, -31, -101, -38, 41, 66, 124, -19, -55, 80, 93, 16, 29, 61, 115, 51, -106, 116, 39, 4, -97, -77, 7, 0, -10, -116, 22, 102], [83, 16, 114, 13, 48, 76, 98, 26, -119, -120, 42, -118, 37, -29, 61, -75, 93, 45, 25, 49, -71, -23, 96, 82, -47, -107, 121, 60, -111, -8, -41, 47, 0, -74, -97, 70, -48, -93, -102, 6, -96, 45, -7, -18, -70, -69, -11, 80, -33, 107, 21, 99, 63, 89, 77, 39, -98, -29, 49, -106, -46, -126, 125, 32], [-108, -58, 117, -100, -39, 5, 67, -52, 63, 98, 98, -45, -101, -70, -24, -34, -66, 15, -46, 19, 75, 122, -111, -13, -82, -30, -7, -82, 7, 110, 2, -127, 81, -50, 103, 29, -48, -10, 88, 5, 103, 84, 71, 106, -31, -93, -40, -40, 107, 111, 64, 13, -104, -81, 108, 10, -108, -8, -34, -107, -108, -107, 10, -21], [-77, 107, -111, 43, 95, 115, 52, -92, -82, 99, 15, 15, 89, -68, 52, 29, 118, -111, 79, 78, 59, 101, -72, -109, 30, -84, -89, -108, -57, 79, 113, 91, -8, -118, 33, 79, -17, -48, -5, -3, 117, -120, -58, 7, -50, 104, -68, -90, 121, 76, -15, 19, -92, 56, 125, 28, -69, -90, 111, -29, 3, -34, 71, 67]]
    operands_decimal_matrix = [
        [-34, -90, 23, 39, 113, -65, 107, -103, -123, -70, -90, -119, -63, 57, 41, 127, -44, 45, 82, -42, 16, 86, -2,
         94, -52, 48, 16, -88, -67, -127, -93, 26, 6, -66, -21, 16, 78, -73, -90, 93, 64, -93, -78, -74, 37, -13, 110,
         -54, 66, 94, 42, 76, 56, 9, 37, 73, 11, 87, 24, 7, 88, -94, 30, -123],
        [51, -42, 68, -110, -118, -14, 31, 60, 61, 64, 5, -118, 116, -94, -105, 54, -25, -53, -94, -71, 47, -97, 54, 53,
         -115, 124, -43, -53, -32, 31, -22, 70, 7, 48, -85, 103, 80, 25, -20, -12, -58, -2, -46, -92, -107, -24, 71,
         -103, 88, 85, 41, 49, -95, 60, -93, -92, 6, 123, -100, -51, 124, 45, 109, 53],
        [-102, -115, -84, -67, -124, -31, 78, 57, -43, -54, 58, -91, 11, 24, -27, -60, -68, -37, -95, -95, 65, 119,
         -125, -5, -97, 33, 126, -41, 19, 23, 68, 99, 15, 21, 66, -113, 1, -38, 116, -22, -119, -77, 89, 29, 8, -98, 40,
         -3, 72, -101, 72, -8, 50, 8, 121, 104, 37, -127, -82, -98, -35, -110, 99, 26],
        [-97, -31, 34, -104, -64, 75, 25, -1, -99, 97, -70, -66, 21, 85, -40, -76, -83, -86, -109, -28, -72, 108, 120,
         -84, -39, 22, -23, -125, -73, 63, -105, -75, -64, -16, 68, -54, 27, -113, -79, -4, -95, 45, 45, 102, 44, -18,
         -126, 41, 53, -16, 8, -38, 75, -20, 23, 45, -74, -126, 121, 33, -33, -58, -81, 119],
        [7, -26, 50, -16, -59, 102, -76, 23, -19, 1, 38, -37, -72, 13, -108, 40, -71, -17, 40, 71, 55, 7, -104, -57, 80,
         -35, -33, -30, 51, -107, -21, 113, 82, 88, -11, -44, -51, -73, 117, -48, -76, -3, 18, 113, -42, 44, 44, 70, 88,
         88, -21, 35, 109, 20, 53, 15, 109, -99, -34, -50, -22, 46, -124, 90],
        [23, 64, 51, -77, 44, 127, -112, 123, -102, 8, -100, -124, -75, 113, 106, -123, 33, -106, 110, -48, -19, 37, -9,
         38, -53, 22, 80, 60, -122, 102, 21, -9, 32, 93, 32, -7, 91, 62, -92, -63, -47, 19, 5, -29, -30, 46, -63, -18,
         -21, -42, -43, 77, 114, -29, -95, -56, -79, -106, -89, 74, -79, 69, -7, -98],
        [-69, 111, 126, -13, 87, -21, 60, 112, -44, -72, -19, -15, 65, -105, 23, 103, -82, -3, 113, -46, 126, -64, 69,
         83, 122, 112, -116, 84, -116, -69, -58, -50, 81, -3, -106, 72, -88, -119, -14, -31, 64, 90, 21, 58, 80, -6,
         -19, 70, -26, -89, -70, 5, 123, -88, -96, -43, 78, 3, -123, -12, -28, -90, -118, -105],
        [61, 54, -11, -27, 23, -119, -78, -89, 32, -110, -71, -33, -9, 23, 48, 40, -92, -60, -39, 89, -125, 27, 117,
         -40, 56, 36, -64, 127, -90, -67, 111, -9, -81, 60, 24, -48, 34, -96, -105, -44, 105, -112, -65, -118, 56, 92,
         -125, 85, 31, 19, -66, 113, -69, -28, -87, -20, 118, 55, -57, 57, -88, 91, 85, 47],
        [-46, -85, -125, 39, 53, -88, -7, 16, -41, -35, 95, 45, -98, 1, -126, 20, 6, 25, 51, 39, -122, -86, 55, -80,
         -94, -124, 125, -115, 86, 119, -71, -127, 64, 106, 120, 78, 26, -5, -28, 36, 24, -34, 6, 48, 62, -116, -16,
         -105, -6, 121, -100, 77, -17, -42, 107, 10, 4, -122, 63, 117, -126, 66, 64, -94],
        [-124, -24, 116, 38, -101, -111, -47, -79, -14, -85, 44, 20, 7, 61, -33, -45, 95, -67, 54, 52, 74, 59, -126,
         -67, -55, -125, 112, 58, -120, 112, -35, -28, -66, 57, 122, 123, -123, -104, 73, 115, 112, -105, -34, -60, -94,
         -58, 82, 12, -52, -28, 41, 105, -49, 95, 97, 101, -4, 120, 82, -100, -105, 0, -13, -78]]

    for i in range(10):
        operands_decimal = []
        for m in range(M):
            operands_decimal.append(random.randrange(-2 ** (N - 1) + 1, 2 ** (N - 1) - 1))

        operands_decimal = operands_decimal_matrix[i]
        GHT_record.append([int(element >= 0) for element in operands_decimal])
        print(sum(operands_decimal))
        # print(sum(operands_decimal) - 64 + sum(GHT_record[i]))  # The summation is modified to replicate the behaviour of the Verilog code
        # operands_decimal = [abs(o) for o in operands_decimal]
        operands_verilog = "".join([binary_repr(operand_decimal, N) for operand_decimal in operands_decimal])

        verilog_code.append(
            f"""\
        #10 OPERANDS <= {M * N}'b{operands_verilog};\
        """)

    verilog_code.append(
        f"""
    end
endmodule
    """)

    with open("wallace_stimulus.txt", "w") as outfile:
        outfile.write("\n".join(verilog_code))


def build_arg_parser():
    parser = argparse.ArgumentParser(description='Generates Verilog code for Wallace tree of \
                3-2 carry save adders using specified number of operands (M) and number of bits (N).')
    parser.add_argument("M", help="Specify the number of operands")
    parser.add_argument("N", help="What's the bit-length of these operands")
    return parser


if __name__ == '__main__':
    args = build_arg_parser().parse_args()
    M = int(args.M)
    N = int(args.N)
    prediction_generation(M, N)
